spring.application.name=backend

# jpa ì¤ì  - Entity, JPAREPO... ë©ìë í¸ì¶ - SQL ëììë¦¬
# JPA ì¿¼ë¦¬ë¬¸ íì¸ ê°ë¥
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.highlight_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true

# ì¡´ì¬íì§ ìë íì´ë¸ ì ê·¼ jpa = ìì±
# jpa orm ë§¤íì íì´ë¸ìì± ddl ì¤íì¬ë¶ ì¤ì 
# DROPí CREATE
spring.jpa.hibernate.ddl-auto=none

# db ì¤ì  (JDBC, mybatis, jpa - ì°ê²°DBì ë³´ ì¤ì )
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/stayj_db
spring.datasource.username=root
spring.datasource.password=1234

spring.jackson.property-naming-strategy=SNAKE_CASE

#swagger
# Swagger-UI의 경로를 /api-test로 설정
springdoc.swagger-ui.path=/api-test

# Swagger-UI에 표시할 API의 엔드포인트 패턴.
# UserController에 @RequestMapping("/swagger") 추가필요
#springdoc.paths-to-match=/swagger/**
#
## API 문서의 경로를 /swagger로 설정.
#springdoc.api-docs.path=/swagger

# 문서 요소의 내림차순으로 설정 (path, query, body, response 순서)
#springdoc.swagger-ui.groups-order=DESC
# 태그 알파벳 순서 정렬
#springdoc.swagger-ui.tags-sorter=alpha
  	
# http 메소드이른 순서 정렬(delete - get - patch - post - put)
# alpha 변경시 알파벳 순서
#springdoc.swagger-ui.operations-sorter=method
#특정 패키지의 컨트롤러만 스캔
springdoc.packages-to-scan=com.backend.controller

app.upload-root=C:/upload
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB
